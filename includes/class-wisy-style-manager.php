<?php

/*
* Wisy Styles Manager class
* @since 0.1.0
*/

if ( ! defined('ABSPATH') ) { exit; } // Exit if access directly

if ( ! class_exists('Wisy_Style_Manager') )
{

/**
 *
 */
class Wisy_Style_Manager
{
	public function create_post_styles( $post_id, $post_blocks = [], $update_css_file = true )
	{
		include_once ( ABSPATH . '/wp-admin/includes/file.php' );
		WP_Filesystem();
		global $wp_filesystem;

		$wisy_files_dir = trailingslashit( wp_upload_dir()['basedir'] ) . 'wisy-builder-files/css/';
		if ( ! file_exists( $wisy_files_dir ) )
		{
			wp_mkdir_p( $wisy_files_dir );
		}

		$post_styles = "/* This file generated by Wisy Builder. Please don't edit or delete this file */";
		$post_styles .= $this->get_blocks_styles( $post_blocks );
		preg_match_all( '/<(md_screen)>(.*?)<\/\1>/m', $post_styles, $match_md_styles );
		preg_match_all( '/<(sm_screen)>(.*?)<\/\1>/m', $post_styles, $match_sm_styles );

		foreach ( $match_md_styles[0] as $key => $value )
		{
			$post_styles = str_replace( $value, '', $post_styles );
		}
		foreach ( $match_sm_styles[0] as $key => $value )
		{
			$post_styles = str_replace( $value, '', $post_styles );
		}

		$post_styles .= '@media screen and (max-width: 768px) {';
			$post_styles .= implode( '', $match_md_styles[2] );
		$post_styles .= '}';

		$post_styles .= '@media screen and (max-width: 360px) {';
			$post_styles .= implode( '', $match_sm_styles[2] );
		$post_styles .= '}';

		if ( $update_css_file )
		{
			$wp_filesystem->put_contents( trailingslashit( $wisy_files_dir ) . 'post-' .$post_id . '.css', $post_styles );
		}

		return $post_styles;
	}

	private function get_blocks_styles( $blocks = [] )
	{
		$blocks = is_array( $blocks ) ? $blocks : [];
		$get_blocks = wisy_get_blocks();
		$styles = '';

		foreach ( $blocks as $key => $block )
		{
			if ( isset( $get_blocks[ $block['name'] ] ) && class_exists( $get_blocks[ $block['name'] ] ) )
			{
				$block_class = new $get_blocks[ $block['name'] ]();
				$atts = isset( $block['atts'] ) ? $block_class->get_atts( $block['atts'] ) : $block_class->get_atts( [] );

				$block_id = 'wisy_' . $atts['_id'];

				$get_styles = $block_class->get_styles( $block_id, $atts );

				$styles .= $get_styles['style'];
				$styles .= '<md_screen>' . $get_styles['style_md'] . '</md_screen>';
				$styles .= '<sm_screen>' . $get_styles['style_sm'] . '</sm_screen>';

				if ( isset( $block['children'] ) && is_array( $block['children'] ) )
				{
					$styles .= $this->get_blocks_styles( $block['children'] );
				}
			} // end if
		}

		return $styles;
	}

	public function get_blocks_fonts( $blocks = [] )
	{
		$get_blocks = wisy_get_blocks();
		$fonts = [];

		foreach ( $blocks as $key => $block )
		{
			$block = array_merge(
				[
					'name' => '',
					'type' => '',
					'atts' => [],
					'children' => []
				],
				$block
			);

			if ( ! isset( $get_blocks[ $block['name'] ] ) || ! is_string( $get_blocks[ $block['name'] ] ) || ! class_exists( $get_blocks[ $block['name'] ] ) )
			{
				continue;
			}

			$block_class = new $get_blocks[ $block['name'] ]();
			$block_fonts = $block_class->fonts_names( $block['atts'], 'array' );
			$block_fonts = is_array( $block_fonts ) ? $block_fonts : [];

			foreach ( $block_fonts as $font_name => $font_weights )
			{
				$fonts[ $font_name ] = isset($fonts[ $font_name ]) ? array_merge( $fonts[ $font_name ], $font_weights ) : $font_weights;
				$fonts[ $font_name ] = array_unique($fonts[ $font_name ]);
			}

			if ( isset( $block['children'] ) && is_array( $block['children'] ) )
			{
				$block_fonts = $this->get_blocks_fonts( $block['children'] );

				foreach ( $block_fonts as $font_name => $font_weights )
				{
					$fonts[ $font_name ] = isset( $fonts[ $font_name ]) ? array_merge( $fonts[ $font_name ], $font_weights ) : $font_weights;
					$fonts[ $font_name ] = array_unique( $fonts[ $font_name ]);
				}
			}
		}

		return $fonts;
	}

	/*
	* Add id to block if it doesn't have one
	*/
	public function add_blocks_ids( $blocks = [] )
	{
		if ( ! is_array( $blocks ) ) {
			return $blocks;
		}

		foreach ( $blocks as $key => $block )
		{
			if ( ! isset( $block['atts']['_id'] ) || empty( $block['atts']['_id'] ) )
			{
				$block['atts']['_id'] = wisy_uniqid(15);
			}

			if ( isset( $block['children'] ) && is_array( $block['children'] ) )
			{
				$block['children'] = $this->add_blocks_ids( $block['children'] );
			}
		}

		return $blocks;
	}
} // end class

} // end if
